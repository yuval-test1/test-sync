/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateBlockDailyArgs } from "./CreateBlockDailyArgs";
import { UpdateBlockDailyArgs } from "./UpdateBlockDailyArgs";
import { DeleteBlockDailyArgs } from "./DeleteBlockDailyArgs";
import { BlockDailyCountArgs } from "./BlockDailyCountArgs";
import { BlockDailyFindManyArgs } from "./BlockDailyFindManyArgs";
import { BlockDailyFindUniqueArgs } from "./BlockDailyFindUniqueArgs";
import { BlockDaily } from "./BlockDaily";
import { BlockDailyService } from "../blockDaily.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BlockDaily)
export class BlockDailyResolverBase {
  constructor(
    protected readonly service: BlockDailyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BlockDaily",
    action: "read",
    possession: "any",
  })
  async _blockDailiesMeta(
    @graphql.Args() args: BlockDailyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BlockDaily])
  @nestAccessControl.UseRoles({
    resource: "BlockDaily",
    action: "read",
    possession: "any",
  })
  async blockDailies(
    @graphql.Args() args: BlockDailyFindManyArgs
  ): Promise<BlockDaily[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BlockDaily, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BlockDaily",
    action: "read",
    possession: "own",
  })
  async blockDaily(
    @graphql.Args() args: BlockDailyFindUniqueArgs
  ): Promise<BlockDaily | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BlockDaily)
  @nestAccessControl.UseRoles({
    resource: "BlockDaily",
    action: "create",
    possession: "any",
  })
  async createBlockDaily(
    @graphql.Args() args: CreateBlockDailyArgs
  ): Promise<BlockDaily> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BlockDaily)
  @nestAccessControl.UseRoles({
    resource: "BlockDaily",
    action: "update",
    possession: "any",
  })
  async updateBlockDaily(
    @graphql.Args() args: UpdateBlockDailyArgs
  ): Promise<BlockDaily | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BlockDaily)
  @nestAccessControl.UseRoles({
    resource: "BlockDaily",
    action: "delete",
    possession: "any",
  })
  async deleteBlockDaily(
    @graphql.Args() args: DeleteBlockDailyArgs
  ): Promise<BlockDaily | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

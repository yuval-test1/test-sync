/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BlockService } from "../block.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BlockCreateInput } from "./BlockCreateInput";
import { BlockWhereInput } from "./BlockWhereInput";
import { BlockWhereUniqueInput } from "./BlockWhereUniqueInput";
import { BlockFindManyArgs } from "./BlockFindManyArgs";
import { BlockUpdateInput } from "./BlockUpdateInput";
import { Block } from "./Block";
import { BlockTransactionFindManyArgs } from "../../blockTransaction/base/BlockTransactionFindManyArgs";
import { BlockTransaction } from "../../blockTransaction/base/BlockTransaction";
import { BlockTransactionWhereUniqueInput } from "../../blockTransaction/base/BlockTransactionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BlockControllerBase {
  constructor(
    protected readonly service: BlockService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Block })
  @nestAccessControl.UseRoles({
    resource: "Block",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(@common.Body() data: BlockCreateInput): Promise<Block> {
    return await this.service.create({
      data: data,
      select: {
        id: true,
        hash: true,
        main: true,
        networkVersion: true,
        transactionsCount: true,
        timestamp: true,
        graffiti: true,
        size: true,
        difficulty: true,
        timeSinceLastBlockMs: true,
        work: true,
        createdAt: true,
        updatedAt: true,
        sequence: true,
        previousBlockHash: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Block] })
  @ApiNestedQuery(BlockFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Block",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<Block[]> {
    const args = plainToClass(BlockFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        hash: true,
        main: true,
        networkVersion: true,
        transactionsCount: true,
        timestamp: true,
        graffiti: true,
        size: true,
        difficulty: true,
        timeSinceLastBlockMs: true,
        work: true,
        createdAt: true,
        updatedAt: true,
        sequence: true,
        previousBlockHash: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Block })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Block",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: BlockWhereUniqueInput
  ): Promise<Block | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        hash: true,
        main: true,
        networkVersion: true,
        transactionsCount: true,
        timestamp: true,
        graffiti: true,
        size: true,
        difficulty: true,
        timeSinceLastBlockMs: true,
        work: true,
        createdAt: true,
        updatedAt: true,
        sequence: true,
        previousBlockHash: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Block })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Block",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: BlockWhereUniqueInput,
    @common.Body() data: BlockUpdateInput
  ): Promise<Block | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          id: true,
          hash: true,
          main: true,
          networkVersion: true,
          transactionsCount: true,
          timestamp: true,
          graffiti: true,
          size: true,
          difficulty: true,
          timeSinceLastBlockMs: true,
          work: true,
          createdAt: true,
          updatedAt: true,
          sequence: true,
          previousBlockHash: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Block })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Block",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: BlockWhereUniqueInput
  ): Promise<Block | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          hash: true,
          main: true,
          networkVersion: true,
          transactionsCount: true,
          timestamp: true,
          graffiti: true,
          size: true,
          difficulty: true,
          timeSinceLastBlockMs: true,
          work: true,
          createdAt: true,
          updatedAt: true,
          sequence: true,
          previousBlockHash: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/blocksTransactions")
  @ApiNestedQuery(BlockTransactionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BlockTransaction",
    action: "read",
    possession: "any",
  })
  async findManyBlocksTransactions(
    @common.Req() request: Request,
    @common.Param() params: BlockWhereUniqueInput
  ): Promise<BlockTransaction[]> {
    const query = plainToClass(BlockTransactionFindManyArgs, request.query);
    const results = await this.service.findBlocksTransactions(params.id, {
      ...query,
      select: {
        block: {
          select: {
            id: true,
          },
        },

        index: true,

        transaction: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/blocksTransactions")
  @nestAccessControl.UseRoles({
    resource: "Block",
    action: "update",
    possession: "any",
  })
  async connectBlocksTransactions(
    @common.Param() params: BlockWhereUniqueInput,
    @common.Body() body: BlockTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      blocksTransactions: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/blocksTransactions")
  @nestAccessControl.UseRoles({
    resource: "Block",
    action: "update",
    possession: "any",
  })
  async updateBlocksTransactions(
    @common.Param() params: BlockWhereUniqueInput,
    @common.Body() body: BlockTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      blocksTransactions: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/blocksTransactions")
  @nestAccessControl.UseRoles({
    resource: "Block",
    action: "update",
    possession: "any",
  })
  async disconnectBlocksTransactions(
    @common.Param() params: BlockWhereUniqueInput,
    @common.Body() body: BlockTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      blocksTransactions: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
